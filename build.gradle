group 'com.univ'
version '1.0-SNAPSHOT'

// 定义默认的任务，即直接运行gradle时会被调用的任务
defaultTasks("hello", "second")


// 引入插件：java
/*
Gradle 默认在 src/main/java 目录下寻找到你的正式环境下的源码, 在 src/test/java 目录下寻找到你的测试源码, 并在src/main/resources目录下寻找到你准备打包进jar的资源文件。测试代码会被加入到环境变量中设置的目录里运行。所有的输出文件都会被创建在构建目录里, 生成的JAR文件会被存放在 build/libs 目录下
 */
apply plugin: 'java'

// 使用不同jdk版本时要注意这里的值，可能会有问题
sourceCompatibility = 1.8

// 引入仓库：maven
/*
通常, 一个 Java 项目的依赖许多外部的 JAR 文件.为了在项目里引用这些 JAR 文件,你需要告诉 Gradle 去哪里找它们.在 Gradle 中,JAR 文件位于一个仓库中，这里的仓库类似于 MAVEN 的仓库，可以被用来提取依赖,或者放入依赖
 */
repositories {
    mavenCentral()
}

// 定义依赖
dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

// 自定义任务
// 使用<<的写法已经被废弃了
/*task hello1 << {
    // 会在doFirst方法之后、doLast方法之前被调用
    println("输出：<< has be deprecated")
}
hello1.doFirst {
    println("hello1:doFirst")
}
hello1.doLast {
    println("hello1:doLast")
}*/


// ------------自定义任务begin----------
task hello {

    // 似乎总共只有两个方法：doFirst，doLast
    doFirst {
        println("输出：hello::doFirst")
    }

    doLast {
        String str = "hello::doLast"
        println("输出：" + str)
    }
}
// ------------自定义任务end----------


// ------------任务继承begin----------
task father {
    doFirst {
        println("输出：父任务先被执行：father")
    }
}

task child(dependsOn:father) {
    doFirst {
        println("输出：子任务被执行：child")
    }
}
// ------------任务继承end----------


// ------------为任务定义属性begin----------
task second {
    // 自定义变量定义在ext中
    ext.univ_prop = "univ_name"
}

task second2 {
    // 引用其它任务的变量
    println(second.univ_prop)
}
// ------------为任务定义属性end----------

// ------------定义方法，任务调用begin----------
String getName() {
    return "return from getName"
}
task third {
    println(getName())
}
// ------------定义方法，任务调用end----------